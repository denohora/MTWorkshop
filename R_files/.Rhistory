5*1/(2^4)
1/(2^4)
plot(0:20, dbinom(0:20, size=20, prob=0.5) )
lines(c(0,20), c(.05,.05))
plot(0:20, pbinom(0:20, size=20, prob=0.5) )
lines(c(0,20), c(.05,.05), type= 2)
lines(c(0,20), c(.05,.05), lty= 2)
lines(c(0,20), c(.95,.95), lty= 2)
x
numtrials = 12
plot(0:numtrials, pbinom(0:numtrials, size=numtrials, prob=0.5) )
lines(c(0,20), c(.05,.05), lty= 2)
lines(c(0,20), c(.95,.95), lty= 2)
plot((0:numtrials)/numtrials, pbinom(0:numtrials, size=numtrials, prob=0.5) )
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5), xlab =  "% Correct", ylab = "Cumulative Probability")
lines(c(0,numtrials), c(.05,.05), lty= 2)
lines(c(0,numtrials), c(.95,.95), lty= 2)
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5), xlab =  "% Correct", ylab = "Cumulative Probability")
lines(c(0,100), c(.05,.05), lty= 2)
lines(c(0,100), c(.95,.95), lty= 2)
numtrials = 6
plot(0:numtrials, pbinom(0:numtrials, size=numtrials, prob=0.5) )
lines(c(0,numtrials), c(.05,.05), lty= 2)
lines(c(0,numtrials), c(.95,.95), lty= 2)
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5),
xlab =  "% Correct", ylab = "Cumulative Probability")
lines(c(0,100), c(.05,.05), lty= 2)
lines(c(0,100), c(.95,.95), lty= 2)
numtrials = 12
plot(0:numtrials, pbinom(0:numtrials, size=numtrials, prob=0.5) )
lines(c(0,numtrials), c(.05,.05), lty= 2)
lines(c(0,numtrials), c(.95,.95), lty= 2)
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5),
xlab =  "% Correct", ylab = "Cumulative Probability")
lines(c(0,100), c(.05,.05), lty= 2)
lines(c(0,100), c(.95,.95), lty= 2)
numtrials = 6 # adjust this
these lines plot the distribution
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5),
xlab =  "% Correct", ylab = "Cumulative Probability", main = paste("Binomial Distribution for ", numtrials, " trials"))
lines(c(0,100), c(.05,.05), lty= 2) # line for sig towards 0
lines(c(0,100), c(.95,.95), lty= 2) # line for sug towards 1
numtrials = 12 # adjust this
these lines plot the distribution
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5),
xlab =  "% Correct", ylab = "Cumulative Probability", main = paste("Binomial Distribution for ", numtrials, " trials"))
lines(c(0,100), c(.05,.05), lty= 2) # line for sig towards 0
lines(c(0,100), c(.95,.95), lty= 2) # line for sug towards 1
numtrials = 12 # adjust this
these lines plot the distribution
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5),
xlab =  "% Correct", ylab = "Cumulative Probability", main = paste("Binomial Distribution for", numtrials, "trials"))
lines(c(0,100), c(.05,.05), lty= 2) # line for sig towards 0
lines(c(0,100), c(.95,.95), lty= 2) # line for sug towards 1
numtrials = 12 # adjust this
these lines plot the distribution
plot((0:numtrials)/numtrials*100, pbinom(0:numtrials, size=numtrials, prob=0.5), type = "o",
xlab =  "% Correct", ylab = "Cumulative Probability", main = paste("Binomial Distribution for", numtrials, "trials"))
lines(c(0,100), c(.05,.05), lty= 2) # line for sig towards 0
lines(c(0,100), c(.95,.95), lty= 2) # line for sug towards 1
options(repos=c(RStudio='http://rstudio.org/_packages', getOption('repos')))
install.packages('shiny')
install.packages("~/Downloads/relaimpo_2.2.zip", repos = NULL)
weeks = c(9, 6, 3, 3, 3, 2, 1, 1)
sum(weeks)
weeks/sum(weeks)
percent = c(30,20,10,10,10,5,5,5)
sum(percent)
percent = c(35,20,10,10,10,5,5,5)
sum(percent)
low1 = c(18, 22, 19, 22)
mean(low1)
low1 = c(18, 23, 19, 22)
mean(low1)
low1 = c(18, 25, 19, 22)
mean(low1)
low1 = c(15, 20, 12, 22)
mean(low1)
low1 = c(15, 20, 16, 22)
mean(low1)
low1 = c(15, 20, 17, 22)
mean(low1)
low1 = c(15, 20, 17, 23)
mean(low1)
low1 = c(16, 20, 17, 23)
mean(low1)
low2 = c(low1, 28, 32)
mean(low2)
low2 = c(low1, 29, 32)
mean(low2)
low2 = c(low1, 29, 33)
mean(low2)
med2 = c(29, 33, 31, 31)
mean(med2)
med2 = c(29, 33, 31, 27)
mean(med2)
med1 = med2
mean(c(low1,med1))
mean(cbind(low1,med1))
mean(low1,med1)
c(mean(low1),mean(med1))
high1 = low1
c(mean(low1),mean(med1), mean(high1))
high2 = c(high1, med1[3:4])
c(mean(low2), mean(high2))
high2
high2[1] = 18
c(mean(low2), mean(high2))
high2[1] = 20
c(mean(low2), mean(high2))
low1
med1
high1
mean(high1)
high2
low2
low2[6] = 31
high2[1] = 16
high2[6] = 31
mean(high2)
high2
mean(med1)
med1
high2[6] = 27
mean(hugh2)
mean(high2)
low1
low2
high1
high2
high2[5] = 33
high2
mean(high2)
mean(low1)
mean(low2)
low2[5:6] = c(27,30)
mean(low2)
low2[5:6] = c(27,39)
mean(low2)
low2[5:6] = c(27,29)
mean(low2)
high2[5:6] = c(26,30)
high2[5:6] = c(30,26)
mean(high2)
med1 = c(low2[5:6], high2[5:6])
med1
mean(low1)
mean(med1)
mean(high1)
mean(low2)
mean(high2)
high1
high1 = c(14, 21, 18,23)
mean(high2)
mean(high1)
med1
install.packages(c("arm", "foreign", "knitr", "lattice", "MASS", "Matrix", "memisc", "multcomp", "nlme", "rpart", "survival"))
install.packages(c("ape", "colorspace", "dichromat", "digest", "Epi", "ggthemes", "hexbin", "igraph", "knitr", "memisc", "metafor", "nlme", "psych", "rattle", "rgl", "shiny"))
install.packages("mlogit")
source('~/.active-rstudio-document', echo=TRUE)
dnorm(0) == 1/ sqrt(2*pi)
dnorm(1) == exp(-1/2)/ sqrt(2*pi)
dnorm(1) == 1/ sqrt(2*pi*exp(1))
## Using "log = TRUE" for an extended range :
par(mfrow=c(2,1))
plot(function(x) dnorm(x, log=TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add=TRUE, col="red",lwd=2)
mtext("dnorm(x, log=TRUE)", adj=0)
mtext("log(dnorm(x))", col="red", adj=1)
plot(function(x) pnorm(x, log.p=TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add=TRUE, col="red",lwd=2)
mtext("pnorm(x, log=TRUE)", adj=0)
mtext("log(pnorm(x))", col="red", adj=1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
plot(function(x) dnorm(x, log=TRUE), -60, 50,
main = "log { Normal density }")
hist(dnorm(1000))
hist(pnorm(1000))
plot(pnorm(1000))
par(mfrow=c(1,1))
plot(pnorm(1000))
plot(rnorm(1000))
hist(rnorm(1000))
require(stats)
set.seed(14)
x <- rchisq(100, df = 4)
## Comparing data with a model distribution should be done with qqplot()!
qqplot(x, qchisq(ppoints(x), df = 4)); abline(0,1, col = 2, lty = 2)
## if you really insist on using hist() ... :
hist(x, freq = FALSE, ylim = c(0, 0.2))
curve(dchisq(x, df = 4), col = 2, lty = 2, lwd = 2, add = TRUE)
hist(rnorm(1000))
curve(dnorm(1000), add = TRUE)
x = rnorm(1000)
hist(x)
library(gamlss)
histDist(x)
histDist(x, nbins = 20)
histDist(x, nbins = 50)
hist(x)
x = rnorm(1000)
histDist(x, nbins = 20)
histDist(x, nbins = 50)
x = rnorm(100)
histDist(x, nbins = 50)
histDist(x, nbins = 20)
x = rnorm(10)
histDist(x, nbins = 20)
histDist(x, nbins = 50)
histDist(x, nbins = 20)
fix(erf)
fix(erfinv)
demo.hist = function(obs, bins) {
require(gamlss)
x = rnorm(obs)
histDist(x, nbins = bins)
}
demo.hist(10, 10)
demo.hist(100, 10)
demo.hist(100, 10)
demo.hist(100, 10)
demo.hist(100, 10)
demo.hist(1000, 10)
demo.hist(1000, 10)
demo.hist(1000, 10)
demo.hist(1000, 10)
demo.hist(1000, 10)
demo.hist(1000, 10)
demo.hist(1000, 10)
demo.normhist = function(obs, bins) {
require(gamlss)
x = rnorm(obs)
histDist(x, nbins = bins)
}
demo.normhist(1000, 10)
demo.normhist(1000, 10)
demo.normhist(1000, 10)
y = rbinom(10, 10, .5)
histDist(y, nbins = 10)
y = rbinom(10, 100, .5)
histDist(y, nbins = 10)
y = rbinom(100, 100, .5)
histDist(y, nbins = 10)
demo.cointoss = function(obs, tosses, nbins = 10) {
require(gamlss)
x = rbinom(100, 100, .5)
histDist(x, nbins = nbins)
}
demo.cointoss(10,10)
demo.cointoss(10,10)
demo.cointoss(10,1)
demo.cointoss(10,1)
demo.cointoss = function(obs, tosses, nbins = 10) {
require(gamlss)
x = rbinom(obs, tosses, .5)
histDist(x, nbins = nbins)
}
demo.cointoss(10,1)
demo.cointoss(100,1)
demo.cointoss(100,10)
demo.cointoss(10,10)
demo.cointoss(10,10)
demo.cointoss(10,10)
demo.cointoss(10,10)
demo.cointoss(100,10)
demo.cointoss(100,100)
demo.cointoss(100,100)
demo.cointoss(100,100)
demo.cointoss(100,100)
demo.cointoss(1000,100)
demo.cointoss(1000,100)
demo.cointoss(1000,100)
demo.cointoss(1000,100)
demo.cointoss(1000,100)
demo.cointoss(1000,100)
data = read.table("/Users/denisohora/Desktop/lords_paradox", sep = "/t")
data = read.table("/Users/denisohora/Desktop/lords_paradox.txt", sep = "/t")
data = read.table("/Users/denisohora/Desktop/lords_paradox.txt", sep = "\t")
View(data)
data = read.table("/Users/denisohora/Desktop/lords_paradox.txt", sep = " ")
data = read.delim("/Users/denisohora/Desktop/lords_paradox.txt", sep = " ")
data = read.delim("/Users/denisohora/Desktop/lords_paradox.txt", sep = "\t")
data = read.delim("/Users/denisohora/Desktop/lords_paradox.txt", sep = " ")
View(data)
data = read.csv("/Users/denisohora/Desktop/lords_paradox.csv")
data
data = read.csv("/Users/denisohora/Desktop/lords_paradox.csv", skip = 1)
data
data = read.csv("/Users/denisohora/Desktop/lords_paradox.csv", header = F)
data
colnames(data) = c("Height.Pre", "Height.Post", "Gender")
data
lm(Height.Post ~ Gender + Height.Pre, data = data)
summary(lm(Height.Post ~ Gender + Height.Pre, data = data))
library(ggplot2)
lords.plot = ggplot(data, aes(x = Height.Pre, y = Height.Post, group = Gender))
lords.plot + geom_point() + geom_line()
lords.plot + geom_point() + geom_smooth()
lords.plot + geom_point() + geom_smooth(method = "lm")
lords.plot + geom_point(color = Group) + geom_smooth(method = "lm")
lords.plot + geom_point(color = group) + geom_smooth(method = "lm")
lords.plot = ggplot(data, aes(x = Height.Pre, y = Height.Post, colour = Gender))
lords.plot + geom_point() + geom_smooth(method = "lm")
aggregate(cbind("Height.Pre", "Height.Post")~ Gender, data, mean)
aggregate(cbind("Height.Pre", "Height.Post") ~ Gender, data=data, mean)
View(data)
aggregate(cbind("Height.Pre", "Height.Post") ~ ., data, mean)
aggregate(cbind(Height.Pre, Height.Post) ~ Gender, data=data, mean)
plot(months, euros, type = "o")
months = c(0, .25, 1, 6, 12, 36)
beer = c(1, .7, .58, .4, .38, .25)
euros = c(1, .82, .7, .5, .45, .28)
plot(months, euros, type = "o")
plot(months, euros, type = "o", pch = 21)
plot(months, euros, type = "o", pch = 22)
plot(months, euros, type = "o", pch = 22, ylim = C(0,1))
plot(months, euros, type = "o", pch = 22, ylim = c(0,1))
plot(months, euros, type = "o", pch = 22, ylim = c(0,1), lwd = 2)
lines (months, beer, type = "o", pch = 22, lwd = 2))
lines (months, beer, type = "o", pch = 22, lwd = 2)
plot(months, euros, type = "o", pch = 22, ylim = c(0,1), lwd = 2, col = 2)
lines (months, beer, type = "o", pch = 22, lwd = 2, col = 3)
plot(months, euros, type = "o", pch = 22, ylim = c(0,1), lwd = 2, col = 4)
lines (months, beer, type = "o", pch = 22, lwd = 2, col = 3)
lines (months, beer, type = "o", pch = 28, lwd = 2, col = 3)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3)
plot(months, euros, type = "o", pch = 22, ylim = c(0,1),
lwd = 2, col = 4, "Price Your Vice", xaxp = c(0,36, 6))
plot(months, euros, type = "o", pch = 22, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, "Price Your Vice", xaxp = c(0,36, 6))
plot(months, euros, type = "o", pch = 22, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, main = "Price Your Vice", xaxp = c(0,36, 6))
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, main = "Price Your Vice", xaxp = c(0,36, 6))
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 1.5)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, main = "Price Your Vice", xaxp = c(0,36, 6))
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 1.8)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, main = "Price Your Vice", xaxp = c(0,36, 6), cex = 2)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 2.5)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, main = "Price Your Vice", xaxp = c(0,36, 6), cex = 1.5)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 2)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, xaxp = c(0,36, 6), cex = 1.5,
main = "Price Your Vice", ylab = "Subjective Value", xlab = "Months",)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 2)
text(30, .5, "Euros", col = 4)
text(30, .4, "Euros", col = 4)
text(30, .4, "Euros", col = 4, cex = 1.5)
text(30, .4, "Euros", col = 4, cex = 1.5)
text(30, .3, "Beer", col = 3, cex = 1.5)
text(30, .25, "Beer", col = 3, cex = 1.5)
text(30, .2, "Beer", col = 3, cex = 1.5)
text(30, .28, "Beer", col = 3, cex = 1.5)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, xaxp = c(0,36, 6), cex = 1.5,
main = "Price Your Vice", ylab = "Subjective Value", xlab = "Months",)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 2)
text(30, .4, "Euros", col = 4, cex = 1.5)
text(30, .28, "Beer", col = 3, cex = 1.5)
text(30, .25, "Beer", col = 3, cex = 1.5)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, xaxp = c(0,36, 6), cex = 1.5,
main = "Price Your Vice", ylab = "Subjective Value", xlab = "Months",)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 2)
text(30, .4, "Euros", col = 4, cex = 1.5)
text(30, .25, "Beer", col = 3, cex = 1.5)
text(30, .23, "Beer", col = 3, cex = 1.5)
plot(months, euros, type = "o", pch = 19, ylim = c(0,1), xlim = c(0,36),
lwd = 2, col = 4, xaxp = c(0,36, 6), cex = 1.5,
main = "Price Your Vice", ylab = "Subjective Value", xlab = "Months",)
lines (months, beer, type = "o", pch = 18, lwd = 2, col = 3, cex = 2)
text(30, .4, "Euros", col = 4, cex = 1.5)
text(30, .23, "Beer", col = 3, cex = 1.5)
install.packages("httpRequest")
install.packages("rdatamarket")
test = read.csv("http://spreadsheets.google.com/ccc?key=0AgdO92JOXxAOdHRvb0Fpd3NndkFOdVpkY1hzdHhldXc")
test = read.xls("http://spreadsheets.google.com/ccc?key=0AgdO92JOXxAOdHRvb0Fpd3NndkFOdVpkY1hzdHhldXc")
library(foreign)
test = read.xls("http://spreadsheets.google.com/ccc?key=0AgdO92JOXxAOdHRvb0Fpd3NndkFOdVpkY1hzdHhldXc")
library(Hmisc)
test = read.xls("http://spreadsheets.google.com/ccc?key=0AgdO92JOXxAOdHRvb0Fpd3NndkFOdVpkY1hzdHhldXc")
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
test = read.xls("http://spreadsheets.google.com/ccc?key=0AgdO92JOXxAOdHRvb0Fpd3NndkFOdVpkY1hzdHhldXc")
install.packages("RCurl")
URL <- "http://spreadsheets.google.com/ccc?key=0AgdO92JOXxAOdHRvb0Fpd3NndkFOdVpkY1hzdHhldXc"
myCsv <-getURL(paste(URL,"&output=csv", sep=""), .opts=curlOptions(followlocation=TRUE,cookiefile="nosuchfile"), ssl.verifypeer=FALSE)
require(RCurl)
URL <- "http://spreadsheets.google.com/ccc?key=0AgdO92JOXxAOdHRvb0Fpd3NndkFOdVpkY1hzdHhldXc"
myCsv <-getURL(paste(URL,"&output=csv", sep=""), .opts=curlOptions(followlocation=TRUE,cookiefile="nosuchfile"), ssl.verifypeer=FALSE)
LifeExpectancies <- read.csv(textConnection(myCsv), stringsAsFactors=FALSE)
test <- read.csv(textConnection(myCsv), stringsAsFactors=FALSE)
View(test)
cov.data = cbind( pass.data[pass.data$test = "pre",]c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" ),
pass.data[pass.data$test = "post",]c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" ) )
cov.data = cbind( pass.data[pass.data$test == "pre",]c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" ),
pass.data[pass.data$test == "post",]c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" ) )
root = "~/Dropbox/Research/Mouse_CS_folder/Data"
setwd(root) # adjust this for your computer
# read in data created by cs_import.R
clean.data = read.csv("output/clean_data.csv")
clean.long = read.csv("output/cleandata_long.csv")
csdata = read.csv("output/cstraining.csv")
sblist.cs = unique(csdata[csdata$PRating.CSp>80 & csdata$UnRating.CSm>80 & csdata$NoRating.N>80,]$sb)
# 21 participants reported discrimnination >80
sblist.cs2 = unique(csdata[csdata$Min.Raw.Rating>75 & csdata$Min.Std.Rating>2,]$sb)
# 15 reported discs above 75 and rated appropriate stims four times higher than highest non-appropriate stim
# pass.data = clean.data # keep all ps
# pass.long = clean.long # keep all ps
pass.data = clean.data[clean.data$subject %in% sblist.cs2,] # only include passing ps (those that responded as expected post CS training)
pass.long = clean.long[clean.long$subject %in% sblist.cs2,]
pass.data$test = as.character(pass.data$test)
pass.data$test = as.factor(pass.data$test)
pass.data$test = relevel(pass.data$test, ref = "pre")
pass.data$cond = as.factor(pass.data$cond)
pass.data$cond =  relevel(pass.data$cond, ref = "Control")
pass.data$subject = as.factor(as.character(pass.data$subject))
pass.long$test = as.character(pass.long$test)
pass.long$test = as.factor(pass.long$test)
pass.long$test = relevel(pass.long$test, ref = "pre")
pass.data$trial.block = "1-24"
pass.data[pass.data$trial>25 & pass.data$trial<50,]$trial.block = "25-48"
pass.data[pass.data$trial>49, ]$trial.block = "49-72"
pass.data$trial.block = as.factor(pass.data$trial.block)
cov.data = cbind( pass.data[pass.data$test == "pre",]c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" ),
pass.data[pass.data$test == "post",]c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" ) )
cov.data = cbind( pass.data[pass.data$test == "pre",][c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" )],
pass.data[pass.data$test == "post",][c("subject", "trial", "test", "cond", "cond.Choose", "cond.Distractor", "RT", "maxd", "x.flip" )] )
ITint.lme =  lme(init.time ~ 1, pass.data,
random = ~1 | subject/cond/test, method =  "ML")
library(nlme)
ITint.lme =  lme(init.time ~ 1, pass.data,
random = ~1 | subject/cond/test, method =  "ML")
IT.test.lme =  lme(init.time ~ 1 + test, pass.data,
random = ~1 | subject/cond/test, method =  "ML")
ITc.test.lme =  lme(init.time ~ 1 + test * cond, pass.data,
random = ~1 | subject/cond/test, method =  "ML")
IT.trialtest.lme =  lme(init.time ~ 1 + trial + test, pass.data,
random = ~1 | subject/cond/test, method =  "ML")
# RTc.trialtest.lme =  lme(RT ~ 1 + test + trial + cond, pass.data,
#                     random = ~1 | subject/cond/test, method =  "ML")
IT.choose.trialtest.lme =  lme(init.time ~ 1 + trial + test * cond.Choose, pass.data,  #[pass.data$cond!="Control",],
random = ~1 | subject/cond/test, method =  "ML")
IT.dist.trialtest.lme =  lme(init.time ~ 1 + test + trial * cond.Distractor, pass.data,  #[pass.data$cond!="Control",],
random = ~1 | subject/cond/test, method =  "ML")
IT.anova = anova(ITint.lme, IT.test.lme, ITc.test.lme, IT.trialtest.lme, IT.choose.trialtest.lme, IT.dist.trialtest.lme)
IT.anova
root = "~/Dropbox/Research/Mouse_CS_folder/Data"
setwd(paste(root, "/CSV files", sep = "")) # adjust this for your computer
# Interesting project - data from CS Training and Emotional Stroop
################################################
# First Step - Get CS Training data to identify CS+, Cs- and N for each participant
# Combine Cs training data from individual csvs into one data frame
# Preferred columns -
# sb, Cs+, Cs-, N, ITI.Min, ITI.Max, CS.Duration, PRating.CS+, PRating.CS-, PRating.N, UnRating.CS+, UnRating.CS-, UnRating.N, NoRating.CS+, NoRating.CS-, NoRating.N,
# 200, CUG, BEH, JOM, 5, 10, 3000, 0, 100, 0, 100, 0, 0, 0, 0, 100
csdata = data.frame(1:50,"CS.Plus","CS.Minus","N",0,0,0,0,0,0,0,0,0,0,0,0)
colnames(csdata) = c("sb", "CS.Plus", "CS.Minus", "N", "ITI.Min", "ITI.Max", "CS.Duration", "PRating.CSp", "PRating.CSm", "PRating.N", "UnRating.CSp", "UnRating.CSm", "UnRating.N", "NoRating.CSp", "NoRating.CSm", "NoRating.N")
csdata$CS.Plus = as.character(csdata$CS.Plus)
csdata$CS.Minus = as.character(csdata$CS.Minus)
csdata$N = as.character(csdata$N)
files=list.files(pattern = '.csv')
View(csdata)
setwd(file.choose)
setwd(file.choose())
?choose.dir
??choose.dir
setwd(dirname(file.choose()))
source("mt_import")
source("mt_import.R")
source("mt_plot.R")
mt.plot
sampledata = mt_import("sampledata.csv")
sampledata = mt.import("sampledata.csv")
View(sampledata)
mt_plot
mt.plot
str(sampledata[,20])
str(sampledata[,1:20])
mt.import
sampledata = mt.import("sampledata.csv", prepVar = T)
str(sampledata[,1:20])
unique(sampledata$code)
mt.plot(sample[sampledata$code == "model_h",])
str(sampledata[,1:20])
str(sampledata[,1:30])
mt.plot(sampledata[sampledata$code == "model_h",])
mt.plot(sampledata[sampledata$code == "model_h",],
xlim = c(-1,1), ylim = x(0,1.5))
mt.plot(sampledata[sampledata$code == "model_h",],
xlim = c(-1,1), ylim = c(0,1.5))
mt.plot(sampledata[sampledata$code == "model_h",],
xlim = c(-1,1), ylim = c(0,1.5), type = "l", col = "red" )
mt.plot(sampledata[sampledata$code == "model_m",], NewPlot = F,
xlim = c(-1,1), ylim = c(0,1.5), type = "l", col = "green" ) # uses "plot"s defaults
mt.plot(sampledata[sampledata$code == "model_h",],
xlim = c(-1,1), ylim = c(0,1.2), type = "l", col = "red" )
mt.plot(sampledata[sampledata$code == "model_m",], NewPlot = F,
xlim = c(-1,1), ylim = c(0,1.2), type = "l", col = "green" ) # uses "plot"s defaults
